{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "Admin Events - Microservicio Seguro API",
		"description": "Colecci√≥n completa para probar el microservicio de gesti√≥n de asistentes con todas las funcionalidades de seguridad implementadas.\n\nüîê **Caracter√≠sticas de Seguridad Probadas:**\n- Autenticaci√≥n JWT\n- Validaciones de contrase√±a robustas\n- Autorizaci√≥n basada en scopes\n- Rate limiting\n- Headers de seguridad\n- Validaciones de datos\n\nüìã **Flujo de Pruebas:**\n1. Health Check\n2. Registro con contrase√±a d√©bil (Error)\n3. Registro exitoso\n4. Login y obtenci√≥n de tokens\n5. Acceso sin autenticaci√≥n (Error)\n6. CRUD completo de asistentes\n7. Pruebas de validaci√≥n de datos\n8. Refresh token\n9. Logout\n\n**Base URL:** http://localhost:3000",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "üè• Health & Status",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": ["{{base_url}}"],
							"path": ["health"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üîê Autenticaci√≥n y Seguridad",
			"item": [
				{
					"name": "‚ùå Registro - Contrase√±a D√©bil (Error Esperado)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422 - Validation Error\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Password validation error message\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.detail[0].msg).to.include(\"uppercase letter\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser_weak\",\n    \"email\": \"weak@test.com\",\n    \"password\": \"testpass123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/register",
							"host": ["{{base_url}}"],
							"path": ["auth", "register"]
						}
					},
					"response": []
				},
				{
					"name": "‚úÖ Registro - Contrase√±a Segura",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"User created successfully\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property(\"id\");",
									"    pm.expect(responseJson).to.have.property(\"username\");",
									"    pm.expect(responseJson.is_active).to.be.true;",
									"    pm.expect(responseJson.is_admin).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{test_username}}\",\n    \"email\": \"{{test_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/register",
							"host": ["{{base_url}}"],
							"path": ["auth", "register"]
						}
					},
					"response": []
				},
				{
					"name": "‚ùå Login - Credenciales Incorrectas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Error message for invalid credentials\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.detail).to.include(\"Incorrect username or password\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{test_username}}\",\n    \"password\": \"WrongPassword123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": ["{{base_url}}"],
							"path": ["auth", "login"]
						}
					},
					"response": []
				},
				{
					"name": "‚úÖ Login - Credenciales Correctas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"JWT tokens received\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property(\"access_token\");",
									"    pm.expect(responseJson).to.have.property(\"refresh_token\");",
									"    pm.expect(responseJson).to.have.property(\"token_type\");",
									"    pm.expect(responseJson.token_type).to.eql(\"bearer\");",
									"    ",
									"    // Guardar tokens para usar en otras requests",
									"    pm.environment.set(\"access_token\", responseJson.access_token);",
									"    pm.environment.set(\"refresh_token\", responseJson.refresh_token);",
									"});",
									"",
									"pm.test(\"Security headers present\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Content-Type-Options\")).to.eql(\"nosniff\");",
									"    pm.expect(pm.response.headers.get(\"X-Frame-Options\")).to.eql(\"DENY\");",
									"    pm.expect(pm.response.headers.get(\"X-XSS-Protection\")).to.include(\"1; mode=block\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{test_username}}\",\n    \"password\": \"{{test_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": ["{{base_url}}"],
							"path": ["auth", "login"]
						}
					},
					"response": []
				},
				{
					"name": "üîÑ Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"New access token received\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property(\"access_token\");",
									"    pm.environment.set(\"access_token\", responseJson.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh_token\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/refresh",
							"host": ["{{base_url}}"],
							"path": ["auth", "refresh"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üë• Gesti√≥n de Asistentes",
			"item": [
				{
					"name": "‚ùå Listar Asistentes - Sin Autenticaci√≥n",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Authentication required error\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.detail).to.include(\"Not authenticated\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/attendees/",
							"host": ["{{base_url}}"],
							"path": ["attendees", ""]
						}
					},
					"response": []
				},
				{
					"name": "‚úÖ Listar Asistentes - Con Autenticaci√≥n",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is array\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an(\"array\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/attendees/",
							"host": ["{{base_url}}"],
							"path": ["attendees", ""]
						}
					},
					"response": []
				},
				{
					"name": "‚ùå Crear Asistente - Datos Inv√°lidos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422 - Validation Error\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Validation errors for document_type and phone_number\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.detail).to.be.an(\"array\");",
									"    ",
									"    const errors = responseJson.detail.map(error => error.loc.join('.'));",
									"    pm.expect(errors).to.include(\"body.document_type\");",
									"    pm.expect(errors).to.include(\"body.phone_number\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Juan P√©rez\",\n    \"email\": \"juan@test.com\",\n    \"document_type\": \"CC\",\n    \"document_number\": \"12345678\",\n    \"phone\": \"555-1234\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/attendees/",
							"host": ["{{base_url}}"],
							"path": ["attendees", ""]
						}
					},
					"response": []
				},
				{
					"name": "‚úÖ Crear Asistente - Datos V√°lidos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Attendee created successfully\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property(\"attendee_id\");",
									"    pm.expect(responseJson).to.have.property(\"name\");",
									"    pm.expect(responseJson).to.have.property(\"email\");",
									"    pm.expect(responseJson).to.have.property(\"created_at\");",
									"    ",
									"    // Guardar ID para uso posterior",
									"    pm.environment.set(\"attendee_id\", responseJson.attendee_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Juan P√©rez\",\n    \"email\": \"juan@test.com\",\n    \"document_type\": \"DNI\",\n    \"document_number\": \"12345678\",\n    \"phone_number\": \"555-1234\",\n    \"address\": \"Calle Falsa 123\",\n    \"date_of_birth\": \"1990-01-15\",\n    \"gender\": \"M\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/attendees/",
							"host": ["{{base_url}}"],
							"path": ["attendees", ""]
						}
					},
					"response": []
				},
				{
					"name": "‚úÖ Obtener Asistente por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Attendee details returned\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property(\"attendee_id\");",
									"    pm.expect(responseJson.name).to.eql(\"Juan P√©rez\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/attendees/{{attendee_id}}",
							"host": ["{{base_url}}"],
							"path": ["attendees", "{{attendee_id}}"]
						}
					},
					"response": []
				},
				{
					"name": "‚úÖ Actualizar Asistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Attendee updated successfully\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.name).to.eql(\"Juan P√©rez Actualizado\");",
									"    pm.expect(responseJson).to.have.property(\"updated_at\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Juan P√©rez Actualizado\",\n    \"email\": \"juan.updated@test.com\",\n    \"document_type\": \"DNI\",\n    \"document_number\": \"12345678\",\n    \"phone_number\": \"555-9999\",\n    \"address\": \"Nueva Direcci√≥n 456\",\n    \"date_of_birth\": \"1990-01-15\",\n    \"gender\": \"M\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/attendees/{{attendee_id}}",
							"host": ["{{base_url}}"],
							"path": ["attendees", "{{attendee_id}}"]
						}
					},
					"response": []
				},
				{
					"name": "‚úÖ Buscar Asistentes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Search results returned\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an(\"array\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/attendees/search?q=Juan",
							"host": ["{{base_url}}"],
							"path": ["attendees", "search"],
							"query": [
								{
									"key": "q",
									"value": "Juan"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "‚úÖ Eliminar Asistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Delete confirmation message\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.message).to.include(\"deleted successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/attendees/{{attendee_id}}",
							"host": ["{{base_url}}"],
							"path": ["attendees", "{{attendee_id}}"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üîí Pruebas de Seguridad Avanzadas",
			"item": [
				{
					"name": "‚ùå Acceso a Endpoint Admin sin Permisos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Insufficient permissions error\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.detail).to.include(\"Insufficient permissions\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/auth/audit-logs",
							"host": ["{{base_url}}"],
							"path": ["auth", "audit-logs"]
						}
					},
					"response": []
				},
				{
					"name": "‚ùå Token Inv√°lido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Invalid token error\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.detail).to.include(\"Invalid token\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalid_token_here"
							}
						],
						"url": {
							"raw": "{{base_url}}/attendees/",
							"host": ["{{base_url}}"],
							"path": ["attendees", ""]
						}
					},
					"response": []
				},
				{
					"name": "‚úÖ Rate Limiting Headers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Rate limiting headers present\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-RateLimit-Limit\")).to.exist;",
									"    pm.expect(pm.response.headers.get(\"X-RateLimit-Remaining\")).to.exist;",
									"    pm.expect(pm.response.headers.get(\"X-RateLimit-Reset\")).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": ["{{base_url}}"],
							"path": ["health"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üö™ Logout",
			"item": [
				{
					"name": "‚úÖ Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Logout successful\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.message).to.include(\"Logout successful\");",
									"    ",
									"    // Limpiar tokens del environment",
									"    pm.environment.unset(\"access_token\");",
									"    pm.environment.unset(\"refresh_token\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/auth/logout",
							"host": ["{{base_url}}"],
							"path": ["auth", "logout"]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "test_username",
			"value": "testuser_{{$randomInt}}",
			"type": "string"
		},
		{
			"key": "test_email",
			"value": "test{{$randomInt}}@test.com",
			"type": "string"
		},
		{
			"key": "test_password",
			"value": "TestPass123!",
			"type": "string"
		}
	]
}
